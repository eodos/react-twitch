{"version":3,"sources":["SearchBar.jsx","ButtonBar.jsx","TwitchCard.jsx","TwitchAccounts.jsx","App.jsx","registerServiceWorker.js","index.js"],"names":["SearchBar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleKeyDown","bind","assertThisInitialized","addAccount","e","keyCode","element","document","getElementById","value","length","onSubmission","react_default","a","createElement","reactstrap_es","md","size","offset","className","id","type","placeholder","onKeyDown","Component","ButtonBar","current","all","online","offline","active","onClick","color","TwitchCard","account","stream","channel","display_name","connected","undefined","game","concat","logo","status","url","xs","left","middle","href","target","object","src","body","rel","heading","preventDefault","delete","shortid","require","TwitchAccounts","state","accounts","accountsInfo","readyToRender","APIerror","errorMessage","showWarning","show","getAccountsInfo","deleteAccount","inputAccounts","_this2","accountPromises","streamPromises","accountsState","slice","forEach","indexOf","toLowerCase","push","axios","get","setState","then","spread","_len","arguments","args","Array","_key","response","data","error","accountsStateCopy","splice","request","responseURL","split","message","streamInfo","accountsInfoCopy","_len2","_key2","i","info","_this$state","accountsCopy","index","_this3","_this$state2","lib_default","twitchCards","unshift","src_TwitchCard_0","key","generate","isOpen","src_ButtonBar","src_SearchBar_0","App","src_TwitchAccounts_0","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","ReactDOM","render","src_App_0","URL","process","origin","addEventListener","fetch","headers","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.cbce3263.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Row, Col, Input } from 'reactstrap';\nimport PropTypes from 'prop-types';\nimport './SearchBar.css';\n\nclass SearchBar extends Component {\n  constructor(props) {\n    super(props);\n    this.handleKeyDown = this.handleKeyDown.bind(this);\n    this.addAccount = this.addAccount.bind(this);\n  }\n\n  handleKeyDown(e) {\n    if (e.keyCode === 13) {\n      this.addAccount();\n    }\n  }\n\n  addAccount() {\n    const element = document.getElementById('input');\n    if (element.value.length) {\n      const { onSubmission } = this.props;\n      onSubmission([element.value]);\n      element.value = '';\n    }\n  }\n\n  render() {\n    return (\n      <Row>\n        <Col md={{ size: 8, offset: 2 }}>\n          <Input\n            className=\"SearchBar\"\n            id=\"input\"\n            type=\"text\"\n            placeholder=\"Add account ...\"\n            onKeyDown={this.handleKeyDown}\n          />\n        </Col>\n      </Row>\n    );\n  }\n}\n\nSearchBar.propTypes = {\n  onSubmission: PropTypes.func.isRequired,\n};\n\nexport default SearchBar;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, ButtonGroup } from 'reactstrap';\n\nconst ButtonBar = (props) => {\n  const {\n    current, all, online, offline,\n  } = props;\n  return (\n    <ButtonGroup>\n      <Button\n        active={current === 'all'}\n        onClick={all}\n        color=\"primary\"\n      >\n        All\n      </Button>\n      <Button\n        active={current === 'online'}\n        onClick={online}\n        color=\"success\"\n      >\n        Online\n      </Button>\n      {' '}\n      <Button\n        active={current === 'offline'}\n        onClick={offline}\n        color=\"danger\"\n      >\n        Offline\n      </Button>\n    </ButtonGroup>\n  );\n};\n\nButtonBar.propTypes = {\n  current: PropTypes.string.isRequired,\n  all: PropTypes.func.isRequired,\n  online: PropTypes.func.isRequired,\n  offline: PropTypes.func.isRequired,\n};\n\nexport default ButtonBar;\n","import React from 'react';\nimport { Row, Col, Media } from 'reactstrap';\nimport PropTypes from 'prop-types';\nimport './TwitchCard.css';\n\nconst TwitchCard = (props) => {\n  const { account, stream } = props;\n  const channel = account.display_name;\n\n  const connected = stream !== null && stream !== undefined;\n  const game = connected ? `Playing ... ${stream.channel.game}` : 'OFFLINE';\n  const logo = account.logo ? account.logo : 'twitch.png';\n  const status = connected ? stream.channel.status : '';\n  const url = connected ? stream.channel.url : `https://www.twitch.tv/${channel}`;\n\n  return (\n    <Row className=\"align-items-center\">\n      <Col md={{ size: 8, offset: 2 }} xs={{ size: 11 }}>\n        <div className={`channel connected_${connected}`} id={`channel_${channel}`}>\n          <Media>\n            <Media left middle href={url} target=\"_blank\">\n              <Media object src={logo} className=\"logo\" />\n            </Media>\n            <Media body>\n              <a target=\"_blank\" rel=\"noopener noreferrer\" href={url}>\n                <Media heading>\n                  {channel}\n                </Media>\n\n                {game}\n                <br />\n                {status}\n              </a>\n            </Media>\n          </Media>\n        </div>\n      </Col>\n      <Col md={{ size: 1 }} xs={{ size: 1 }}>\n        <button\n          type=\"button\"\n          className=\"close\"\n          onClick={(e) => {\n            e.preventDefault();\n            props.delete(channel, connected);\n          }}\n        >\n          &times;\n        </button>\n      </Col>\n    </Row>\n  );\n};\n\nTwitchCard.propTypes = {\n  account: PropTypes.element.isRequired,\n  stream: PropTypes.element.isRequired,\n  delete: PropTypes.func.isRequired,\n};\n\nexport default TwitchCard;\n","import React, {\n  Component,\n} from 'react';\nimport axios from 'axios';\nimport {\n  Alert,\n} from 'reactstrap';\nimport MDSpinner from 'react-md-spinner';\nimport SearchBar from './SearchBar';\nimport ButtonBar from './ButtonBar';\nimport TwitchCard from './TwitchCard';\nimport './TwitchAccounts.css';\n\nconst shortid = require('shortid');\n\nclass TwitchAccounts extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      accounts: [],\n      accountsInfo: [],\n      readyToRender: false,\n      APIerror: false,\n      errorMessage: '',\n      showWarning: false,\n      show: 'all',\n    };\n    this.getAccountsInfo = this.getAccountsInfo.bind(this);\n    this.deleteAccount = this.deleteAccount.bind(this);\n  }\n\n  componentDidMount() {\n    this.getAccountsInfo([\n      'ninja',\n      'shroud',\n      'bibleboy666',\n      'eodos',\n      'freecodecamp',\n      'xLanne',\n      'Claritytx',\n      'summit1g',\n      'anniefuchsia',\n    ]);\n  }\n\n  getAccountsInfo(inputAccounts) {\n    const accountPromises = [];\n    const streamPromises = [];\n    const accountQuery = 'https://wind-bow.glitch.me/twitch-api/users/';\n    const streamQuery = 'https://wind-bow.glitch.me/twitch-api/streams/';\n    this.accountsInfo = [];\n\n    const { accounts } = this.state;\n    const accountsState = accounts.slice();\n    inputAccounts.forEach((channel) => {\n      if (accountsState.indexOf(channel.toLowerCase()) === -1) {\n        accountsState.push(channel.toLowerCase());\n        accountPromises.push(axios.get(accountQuery + channel));\n      } else {\n        this.setState({\n          showWarning: true,\n          errorMessage: `The account ${channel} has already been added`,\n        });\n      }\n    });\n    this.setState({\n      accounts: accountsState,\n    });\n\n    axios\n      .all(accountPromises)\n      .then(\n        axios.spread((...args) => {\n          args.forEach((response) => {\n            if (response.data.error) {\n              const accountsStateCopy = accounts.slice();\n              accountsStateCopy.splice(\n                accountsStateCopy.indexOf(\n                  response.request.responseURL.split('/').slice(-1)[0],\n                ),\n              );\n              this.setState({\n                accounts: accountsStateCopy,\n                showWarning: true,\n                errorMessage: response.data.message,\n              });\n            } else {\n              this.accountsInfo.push(response.data);\n              streamPromises.push(\n                axios.get(streamQuery + response.data.display_name),\n              );\n            }\n          });\n        }),\n        () => {\n          const { streamInfo } = this.state;\n          if (!streamInfo.length) {\n            this.setState({\n              APIerror: true,\n            });\n          } else {\n            this.setState({\n              showWarning: true,\n              errorMessage: 'API Error, please retry',\n            });\n          }\n        },\n      )\n      .then(() => {\n        axios.all(streamPromises).then(axios.spread((...args) => {\n          const { accountsInfo } = this.state;\n          const accountsInfoCopy = accountsInfo.slice();\n\n          args.forEach((response, i) => {\n            accountsInfoCopy.push({\n              connected: response.data.stream !== null,\n              info: this.accountsInfo[i],\n              stream: response.data.stream,\n            });\n          });\n          this.setState({\n            accountsInfo: accountsInfoCopy,\n            readyToRender: true,\n          });\n        }), () => {\n          const { streamInfo } = this.state;\n          if (!streamInfo.length) {\n            this.setState({\n              APIerror: true,\n            });\n          } else {\n            this.setState({\n              showWarning: true,\n              errorMessage: 'API Error, please retry',\n            });\n          }\n        });\n      });\n  }\n\n  deleteAccount(account) {\n    const { accounts, accountsInfo } = this.state;\n    const accountsCopy = accounts.slice();\n    const accountsInfoCopy = accountsInfo.slice();\n    const index = accounts.indexOf(account.toLowerCase());\n    accountsCopy.splice(index, 1);\n    accountsInfoCopy.splice(index, 1);\n    this.setState({\n      accounts: accountsCopy,\n      accountsInfo: accountsInfoCopy,\n    });\n  }\n\n  render() {\n    const {\n      APIerror, readyToRender, accountsInfo, show, showWarning, errorMessage,\n    } = this.state;\n    if (APIerror) {\n      return (\n        <div className=\"fullScreen\">\n          Error connecting to the API.Please retry later\n        </div>\n      );\n    }\n    if (!readyToRender) {\n      return (\n        <MDSpinner\n          className=\"fullScreen\"\n          size={100}\n        />\n      );\n    }\n    const twitchCards = [];\n    accountsInfo.forEach((account) => {\n      if (account.connected && show !== 'offline') {\n        twitchCards.unshift(\n          <TwitchCard\n            key={shortid.generate()}\n            account={account.info}\n            stream={account.stream}\n            delete={this.deleteAccount}\n          />,\n        );\n      } else if (!account.connected && show !== 'online') {\n        twitchCards.push(\n          <TwitchCard\n            key={shortid.generate()}\n            account={account.info}\n            stream={account.stream}\n            delete={this.deleteAccount}\n          />,\n        );\n      }\n    });\n    return (\n      <div>\n        <Alert\n          color=\"danger\"\n          isOpen={showWarning}\n        >\n          {errorMessage}\n        </Alert>\n        <ButtonBar\n          current={show}\n          all={() => this.setState({ show: 'all' })}\n          online={() => this.setState({ show: 'online' })}\n          offline={() => this.setState({ show: 'offline' })}\n        />\n        <SearchBar onSubmission={this.getAccountsInfo} />\n        <div id=\"channels\">{twitchCards}</div>\n      </div>\n    );\n  }\n}\n\nexport default TwitchAccounts;\n","import React from 'react';\nimport { Container } from 'reactstrap';\nimport TwitchAccounts from './TwitchAccounts';\nimport './App.css';\n\nconst App = () => (\n  <Container>\n    <div className=\"App\">\n      <div className=\"App-header\">\n        <h2>Twitch Monitor App</h2>\n      </div>\n      <TwitchAccounts />\n    </div>\n  </Container>\n);\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (!isLocalhost) {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      } else {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}